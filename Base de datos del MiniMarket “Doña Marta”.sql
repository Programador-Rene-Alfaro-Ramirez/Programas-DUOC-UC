-- ============================================
-- SEMANA 8 - PRY2204_SEMANA8
-- Usuario: PRY2204_S8
-- Base de datos: EXP3S3ReneAlfaro (Oracle Cloud)
--> Wallet Wallet_EXP3S3ReneAlfaro Contrase√±a: Reneduoc1234
-- ============================================

-- üîπ SECUENCIAS

-- Eliminar tablas si existen

SET DEFINE OFF;

BEGIN
  FOR t IN (
    SELECT table_name
    FROM user_tables
    WHERE table_name IN (
      'DETALLE_VENTA','VENTA','PRODUCTO','CATEGORIA','MARCA','PROVEEDOR',
      'VENDEDOR','ADMINISTRATIVO','EMPLEADO','MEDIO_PAGO','SALUD','AFP',
      'COMUNA','REGION'
    )
  ) LOOP
    EXECUTE IMMEDIATE 'DROP TABLE ' || t.table_name || ' CASCADE CONSTRAINTS';
  END LOOP;
EXCEPTION
  WHEN OTHERS THEN
    NULL; -- ignorar errores si alguna tabla no existe
END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE seq_salud'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE seq_empleado'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP VIEW vw_ventas_empleado'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP VIEW vw_productos_stock_bajo'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP VIEW vw_detalle_venta_total'; EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- Eliminar secuencias si existen
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE seq_salud'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP SEQUENCE seq_empleado'; EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- Eliminar vistas si existen
BEGIN EXECUTE IMMEDIATE 'DROP VIEW vw_ventas_empleado'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP VIEW vw_productos_stock_bajo'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP VIEW vw_detalle_venta_total'; EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- 1) Privilegios y detalles del programa al usar ADMIN y Oracle Cloud
GRANT CONNECT, RESOURCE TO PRY2204_S8;
GRANT CREATE SESSION TO PRY2204_S8;
GRANT CREATE TABLE TO PRY2204_S8;
GRANT CREATE SEQUENCE TO PRY2204_S8;
GRANT CREATE VIEW TO PRY2204_S8;
GRANT UNLIMITED TABLESPACE TO PRY2204_S8;

--2) Creacion de Tablas (PK, FK)

-- Tabla REGION
CREATE TABLE REGION (
  id_region NUMBER PRIMARY KEY,
  nombre VARCHAR2(50) NOT NULL
);

-- Tabla COMUNA
CREATE TABLE COMUNA (
  id_comuna NUMBER PRIMARY KEY,
  nombre VARCHAR2(50) NOT NULL,
  id_region NUMBER NOT NULL,
  CONSTRAINT fk_comuna_region FOREIGN KEY (id_region) REFERENCES REGION(id_region)
);

-- Tabla AFP
CREATE TABLE AFP (
  id_afp NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 210 INCREMENT BY 6) PRIMARY KEY,
  nombre VARCHAR2(50) NOT NULL
);

-- Tabla SALUD
CREATE TABLE SALUD (
  id_salud NUMBER PRIMARY KEY,
  nombre VARCHAR2(50) NOT NULL
);

-- Tabla MEDIO_PAGO
CREATE TABLE MEDIO_PAGO (
  id_medio_pago NUMBER PRIMARY KEY,
  nombre VARCHAR2(50) NOT NULL
);

-- Tabla EMPLEADO
CREATE TABLE EMPLEADO (
  id_empleado NUMBER PRIMARY KEY,
  rut VARCHAR2(12) NOT NULL,
  nombre VARCHAR2(50) NOT NULL,
  apellido VARCHAR2(50) NOT NULL,
  direccion VARCHAR2(100),
  telefono VARCHAR2(20),
  correo VARCHAR2(100),
  fecha_nacimiento DATE,
  fecha_contrato DATE,
  sueldo NUMBER(12,2) NOT NULL,
  bono_jefatura NUMBER(12,2),
  activo CHAR(1) CHECK (activo IN ('S','N')),
  id_afp NUMBER NOT NULL,
  id_salud NUMBER NOT NULL,
  id_comuna NUMBER NOT NULL,
  id_region NUMBER NOT NULL,
  CONSTRAINT fk_empleado_afp FOREIGN KEY (id_afp) REFERENCES AFP(id_afp),
  CONSTRAINT fk_empleado_salud FOREIGN KEY (id_salud) REFERENCES SALUD(id_salud),
  CONSTRAINT fk_empleado_comuna FOREIGN KEY (id_comuna) REFERENCES COMUNA(id_comuna),
  CONSTRAINT fk_empleado_region FOREIGN KEY (id_region) REFERENCES REGION(id_region)
);

-- Tabla ADMINISTRATIVO
CREATE TABLE ADMINISTRATIVO (
  id_administrativo NUMBER PRIMARY KEY,
  id_empleado NUMBER NOT NULL,
  CONSTRAINT fk_admin_empleado FOREIGN KEY (id_empleado) REFERENCES EMPLEADO(id_empleado)
);

-- Tabla VENDEDOR
CREATE TABLE VENDEDOR (
  id_vendedor NUMBER PRIMARY KEY,
  comision NUMBER(5,2),
  id_empleado NUMBER NOT NULL,
  CONSTRAINT fk_vendedor_empleado FOREIGN KEY (id_empleado) REFERENCES EMPLEADO(id_empleado)
);

-- Tabla PROVEEDOR
CREATE TABLE PROVEEDOR (
  id_proveedor NUMBER PRIMARY KEY,
  nombre VARCHAR2(100) NOT NULL,
  direccion VARCHAR2(100),
  telefono VARCHAR2(20),
  correo VARCHAR2(100) NOT NULL,
  id_comuna NUMBER NOT NULL,
  id_region NUMBER NOT NULL,
  CONSTRAINT fk_proveedor_comuna FOREIGN KEY (id_comuna) REFERENCES COMUNA(id_comuna),
  CONSTRAINT fk_proveedor_region FOREIGN KEY (id_region) REFERENCES REGION(id_region)
);

-- Tabla MARCA
CREATE TABLE MARCA (
  id_marca NUMBER PRIMARY KEY,
  nombre VARCHAR2(50) NOT NULL
);

-- Tabla CATEGORIA
CREATE TABLE CATEGORIA (
  id_categoria NUMBER PRIMARY KEY,
  nombre VARCHAR2(50) NOT NULL
);

-- Tabla PRODUCTO
CREATE TABLE PRODUCTO (
  id_producto NUMBER PRIMARY KEY,
  nombre VARCHAR2(100) NOT NULL,
  descripcion VARCHAR2(200),
  precio NUMBER(10,2) NOT NULL,
  stock NUMBER NOT NULL,
  id_categoria NUMBER NOT NULL,
  id_marca NUMBER NOT NULL,
  id_proveedor NUMBER NOT NULL,
  CONSTRAINT fk_producto_categoria FOREIGN KEY (id_categoria) REFERENCES CATEGORIA(id_categoria),
  CONSTRAINT fk_producto_marca FOREIGN KEY (id_marca) REFERENCES MARCA(id_marca),
  CONSTRAINT fk_producto_proveedor FOREIGN KEY (id_proveedor) REFERENCES PROVEEDOR(id_proveedor)
);

-- Tabla VENTA
CREATE TABLE VENTA (
  id_venta NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 5050 INCREMENT BY 3) PRIMARY KEY,
  fecha DATE NOT NULL,
  total NUMBER(10,2),
  id_empleado NUMBER NOT NULL,
  id_medio_pago NUMBER NOT NULL,
  CONSTRAINT fk_venta_empleado FOREIGN KEY (id_empleado) REFERENCES EMPLEADO(id_empleado),
  CONSTRAINT fk_venta_mediopago FOREIGN KEY (id_medio_pago) REFERENCES MEDIO_PAGO(id_medio_pago)
);

-- Tabla DETALLE_VENTA
CREATE TABLE DETALLE_VENTA (
  id_detalle_venta NUMBER PRIMARY KEY,
  cantidad NUMBER NOT NULL,
  precio_unitario NUMBER(10,2),
  descuento NUMBER(5,2),
  id_producto NUMBER NOT NULL,
  id_venta NUMBER NOT NULL,
  CONSTRAINT fk_detalle_venta_producto FOREIGN KEY (id_producto) REFERENCES PRODUCTO(id_producto),
  CONSTRAINT fk_detalle_venta_venta FOREIGN KEY (id_venta) REFERENCES VENTA(id_venta)
);

-- Modificaciones del modelo seg√∫n Caso 2: Reglas de negocio con ALTER TABLE
ALTER TABLE EMPLEADO ADD CONSTRAINT ck_empleado_sueldo_minimo CHECK (sueldo >= 400000);
ALTER TABLE VENDEDOR ADD CONSTRAINT ck_vendedor_comision CHECK (comision BETWEEN 0 AND 0.25);
ALTER TABLE PRODUCTO ADD CONSTRAINT ck_producto_stock_minimo CHECK (stock >= 3);
ALTER TABLE PROVEEDOR ADD CONSTRAINT un_proveedor_correo UNIQUE (correo);
ALTER TABLE MARCA ADD CONSTRAINT un_marca_nombre UNIQUE (nombre);
ALTER TABLE DETALLE_VENTA ADD CONSTRAINT ck_detalle_venta_cantidad CHECK (cantidad > 0);

-- Secuencia para SALUD (inicia en 2050, incrementa en 10)
CREATE SEQUENCE seq_salud START WITH 2050 INCREMENT BY 10;

-- Secuencia para AFP (ya se usa IDENTITY en la tabla, no se necesita secuencia adicional)

-- Secuencia para EMPLEADO (inicia en 750, incrementa en 3)
CREATE SEQUENCE seq_empleado START WITH 750 INCREMENT BY 3;


-- Insertar datos en SALUD
INSERT INTO SALUD (id_salud, nombre) VALUES (seq_salud.NEXTVAL, 'Fonasa');
INSERT INTO SALUD (id_salud, nombre) VALUES (seq_salud.NEXTVAL, 'Isapre Colmena');
INSERT INTO SALUD (id_salud, nombre) VALUES (seq_salud.NEXTVAL, 'Isapre Banm√©dica');
INSERT INTO SALUD (id_salud, nombre) VALUES (seq_salud.NEXTVAL, 'Cruz Blanca');

-- Insertar datos en AFP (usa IDENTITY)
INSERT INTO AFP (nombre) VALUES ('Habitat');
INSERT INTO AFP (nombre) VALUES ('Cuprum');
INSERT INTO AFP (nombre) VALUES ('Provida');
INSERT INTO AFP (nombre) VALUES ('PlanVital');

-- Insertar datos en MEDIO_PAGO
INSERT INTO MEDIO_PAGO (id_medio_pago, nombre) VALUES (1, 'Efectivo');
INSERT INTO MEDIO_PAGO (id_medio_pago, nombre) VALUES (2, 'Tarjeta D√©bito');
INSERT INTO MEDIO_PAGO (id_medio_pago, nombre) VALUES (3, 'Tarjeta Cr√©dito');
INSERT INTO MEDIO_PAGO (id_medio_pago, nombre) VALUES (4, 'Cheque');

-- REGIONES
INSERT INTO REGION (id_region, nombre) VALUES (1, 'Regi√≥n Metropolitana');
INSERT INTO REGION (id_region, nombre) VALUES (2, 'Valpara√≠so');
INSERT INTO REGION (id_region, nombre) VALUES (3, 'Biob√≠o');
INSERT INTO REGION (id_region, nombre) VALUES (4, 'Los Lagos');

-- COMUNAS
INSERT INTO COMUNA (id_comuna, nombre, id_region) VALUES (1, 'Providencia', 1);
INSERT INTO COMUNA (id_comuna, nombre, id_region) VALUES (2, 'Maip√∫', 1);
INSERT INTO COMUNA (id_comuna, nombre, id_region) VALUES (3, 'Vi√±a del Mar', 2);

-- CATEGOR√çAS
INSERT INTO CATEGORIA (id_categoria, nombre) VALUES (1, 'Abarrotes');
INSERT INTO CATEGORIA (id_categoria, nombre) VALUES (2, 'Bebidas');
INSERT INTO CATEGORIA (id_categoria, nombre) VALUES (3, 'Limpieza');

-- MARCAS
INSERT INTO MARCA (id_marca, nombre) VALUES (1, 'Nestl√©');
INSERT INTO MARCA (id_marca, nombre) VALUES (2, 'Coca-Cola');
INSERT INTO MARCA (id_marca, nombre) VALUES (3, 'Virutex');

-- PROVEEDORES
INSERT INTO PROVEEDOR (id_proveedor, nombre, direccion, telefono, correo, id_comuna, id_region)
VALUES (1, 'Distribuidora Central', 'Av. Matta 123', '912345678', 'central@proveedores.cl', 1, 1);

INSERT INTO PROVEEDOR (id_proveedor, nombre, direccion, telefono, correo, id_comuna, id_region)
VALUES (2, 'Log√≠stica Norte', 'Camino La P√≥lvora 456', '987654321', 'norte@proveedores.cl', 3, 2);

-- EMPLEADOS
---------------------------------------------------------
-- 1) Marcela Gonz√°lez P√©rez
INSERT INTO EMPLEADO VALUES (seq_empleado.NEXTVAL, '11111111-1', 'Marcela', 'Gonz√°lez', 'Perez', NULL, NULL,
TO_DATE('1990-03-15','YYYY-MM-DD'), TO_DATE('2022-03-15','YYYY-MM-DD'), 950000, 80000, 'S', 210, 2050, 1, 1);

-- 2) Jos√© Mu√±oz Ram√≠rez
INSERT INTO EMPLEADO VALUES (seq_empleado.NEXTVAL, '22222222-2', 'Jos√©', 'Mu√±oz', 'Ram√≠rez', NULL, NULL,
TO_DATE('1985-07-10','YYYY-MM-DD'), TO_DATE('2021-07-10','YYYY-MM-DD'), 900000, 75000, 'S', 216, 2060, 1, 1);

-- 3) Ver√≥nica Soto Alarc√≥n
INSERT INTO EMPLEADO VALUES (seq_empleado.NEXTVAL, '33333333-3', 'Ver√≥nica', 'Soto', 'Alarc√≥n', NULL, NULL,
TO_DATE('1988-01-05','YYYY-MM-DD'), TO_DATE('2020-01-05','YYYY-MM-DD'), 880000, 70000, 'S', 222, 2070, 2, 2);

-- 4) Luis Reyes Fuentes
INSERT INTO EMPLEADO VALUES (seq_empleado.NEXTVAL, '44444444-4', 'Luis', 'Reyes', 'Fuentes', NULL, NULL,
TO_DATE('1992-04-01','YYYY-MM-DD'), TO_DATE('2023-04-01','YYYY-MM-DD'), 560000, NULL, 'S', 210, 2060, 2, 2);

-- 5) Claudia Fern√°ndez Lagos
INSERT INTO EMPLEADO VALUES (seq_empleado.NEXTVAL, '55555555-5', 'Claudia', 'Fern√°ndez', 'Lagos', NULL, NULL,
TO_DATE('1994-04-15','YYYY-MM-DD'), TO_DATE('2023-04-15','YYYY-MM-DD'), 600000, NULL, 'S', 216, 2070, 2, 2);

-- 6) Carlos Navarro Vega
INSERT INTO EMPLEADO VALUES (seq_empleado.NEXTVAL, '66666666-6', 'Carlos', 'Navarro', 'Vega', NULL, NULL,
TO_DATE('1989-05-01','YYYY-MM-DD'), TO_DATE('2023-05-01','YYYY-MM-DD'), 610000, NULL, 'S', 216, 2050, 1, 1);

-- 7) Javiera Pino Rojas
INSERT INTO EMPLEADO VALUES (seq_empleado.NEXTVAL, '77777777-7', 'Javiera', 'Pino', 'Rojas', NULL, NULL,
TO_DATE('1993-05-10','YYYY-MM-DD'), TO_DATE('2023-05-10','YYYY-MM-DD'), 650000, NULL, 'S', 222, 2050, 1, 1);

-- 8) Diego Mella Contreras
INSERT INTO EMPLEADO VALUES (seq_empleado.NEXTVAL, '88888888-8', 'Diego', 'Mella', 'Contreras', NULL, NULL,
TO_DATE('1991-05-12','YYYY-MM-DD'), TO_DATE('2023-05-12','YYYY-MM-DD'), 620000, NULL, 'S', 210, 2060, 2, 2);

-- 9) Fernanda Salas Herrera
INSERT INTO EMPLEADO VALUES (seq_empleado.NEXTVAL, '99999999-9', 'Fernanda', 'Salas', 'Herrera', NULL, NULL,
TO_DATE('1990-05-18','YYYY-MM-DD'), TO_DATE('2023-05-18','YYYY-MM-DD'), 570000, NULL, 'S', 216, 2070, 2, 2);

-- 10) Tom√°s Vidal Espinoza
INSERT INTO EMPLEADO VALUES (seq_empleado.NEXTVAL, '10101010-0', 'Tom√°s', 'Vidal', 'Espinoza', NULL, NULL,
TO_DATE('1990-06-01','YYYY-MM-DD'), TO_DATE('2023-06-01','YYYY-MM-DD'), 530000, NULL, 'S', 222, 2050, 1, 1);

-- 11) Marta Gonz√°lez 
INSERT INTO EMPLEADO VALUES (seq_empleado.NEXTVAL, '12345678-9', 'Marta', 'Gonz√°lez', 'P√©rez', NULL, NULL,
TO_DATE('1990-05-15','YYYY-MM-DD'), TO_DATE('2024-01-01','YYYY-MM-DD'), 550000, 50000, 'S', 210, 2050, 1, 1);

---------------------------------------------------------
-- REGISTROS EN ADMINISTRATIVO Y VENDEDOR
---------------------------------------------------------
-- ADMINISTRATIVO: Marcela(750), Jos√©(753), Carlos(765), Javiera(768), Marta(780)
INSERT INTO ADMINISTRATIVO (id_administrativo, id_empleado) VALUES (1, 750);
INSERT INTO ADMINISTRATIVO (id_administrativo, id_empleado) VALUES (2, 753);
INSERT INTO ADMINISTRATIVO (id_administrativo, id_empleado) VALUES (3, 765);
INSERT INTO ADMINISTRATIVO (id_administrativo, id_empleado) VALUES (4, 768);
INSERT INTO ADMINISTRATIVO (id_administrativo, id_empleado) VALUES (5, 780);

-- VENDEDOR: Ver√≥nica(756), Luis(759), Claudia(762), Diego(771), Fernanda(774), Tom√°s(777)
INSERT INTO VENDEDOR (id_vendedor, comision, id_empleado) VALUES (1, 0.10, 756);
INSERT INTO VENDEDOR (id_vendedor, comision, id_empleado) VALUES (2, 0.12, 759);
INSERT INTO VENDEDOR (id_vendedor, comision, id_empleado) VALUES (3, 0.08, 762);
INSERT INTO VENDEDOR (id_vendedor, comision, id_empleado) VALUES (4, 0.10, 771);
INSERT INTO VENDEDOR (id_vendedor, comision, id_empleado) VALUES (5, 0.09, 774);
INSERT INTO VENDEDOR (id_vendedor, comision, id_empleado) VALUES (6, 0.11, 777);

COMMIT;

-- 6) Consultas y vistas solicitadas (Caso 4) + vistas √∫tiles

CREATE OR REPLACE VIEW vw_ventas_empleado AS
SELECT 
  e.id_empleado,
  e.nombre || ' ' || e.apellido AS empleado,
  COUNT(v.id_venta) AS cantidad_ventas,
  SUM(v.total) AS total_vendido
FROM EMPLEADO e
LEFT JOIN VENTA v ON e.id_empleado = v.id_empleado
GROUP BY e.id_empleado, e.nombre, e.apellido;

CREATE OR REPLACE VIEW vw_productos_stock_bajo AS
SELECT id_producto, nombre, stock, precio
FROM PRODUCTO
WHERE stock < 10;

CREATE OR REPLACE VIEW vw_detalle_venta_total AS
SELECT 
  dv.id_detalle_venta,
  p.nombre AS producto,
  dv.cantidad,
  dv.precio_unitario,
  dv.descuento,
  (dv.precio_unitario * dv.cantidad) - (dv.precio_unitario * dv.cantidad * NVL(dv.descuento,0)) AS total_final
FROM DETALLE_VENTA dv
JOIN PRODUCTO p ON dv.id_producto = p.id_producto;

-- Informe 1: Empleados activos con bono (IDENTIFICADOR, NOMBRE COMPLETO, SALARIO, BONIFICACION, SALARIO SIMULADO)
SELECT 
  e.id_empleado AS IDENTIFICADOR,
  e.nombre || ' ' || e.apellido AS "NOMBRE COMPLETO",
  e.sueldo AS SALARIO,
  e.bono_jefatura AS BONIFICACION,
  (e.sueldo + e.bono_jefatura) AS "SALARIO SIMULADO"
FROM EMPLEADO e
WHERE e.activo = 'S'
  AND e.bono_jefatura IS NOT NULL
ORDER BY "SALARIO SIMULADO" DESC, e.apellido DESC;

-- Informe 2: Empleados con sueldo entre 550000 y 800000 (EMPLEADO, SUELDO, POSIBLE AUMENTO, SALARIO SIMULADO)
SELECT 
  e.nombre || ' ' || e.apellido AS EMPLEADO,
  e.sueldo AS SUELDO,
  ROUND(e.sueldo * 0.08, 0) AS "POSIBLE AUMENTO",
  ROUND(e.sueldo + (e.sueldo * 0.08), 0) AS "SALARIO SIMULADO"
FROM EMPLEADO e
WHERE e.sueldo BETWEEN 550000 AND 800000
ORDER BY e.sueldo ASC;

-- Consultas adicionales de control/informaci√≥n
SELECT id_producto, nombre AS producto, stock, precio FROM PRODUCTO WHERE stock < 10 ORDER BY stock ASC;

SELECT e.id_empleado, e.nombre || ' ' || e.apellido AS empleado, COUNT(v.id_venta) AS cantidad_ventas, NVL(SUM(v.total),0) AS total_vendido
FROM EMPLEADO e
LEFT JOIN VENTA v ON e.id_empleado = v.id_empleado
GROUP BY e.id_empleado, e.nombre, e.apellido
ORDER BY total_vendido DESC;

SELECT c.nombre AS categoria, NVL(SUM(dv.cantidad * dv.precio_unitario),0) AS total_categoria
FROM DETALLE_VENTA dv
JOIN PRODUCTO p ON dv.id_producto = p.id_producto
JOIN CATEGORIA c ON p.id_categoria = c.id_categoria
GROUP BY c.nombre
ORDER BY total_categoria DESC;

-- Comprobaciones de integridad referencial (deben retornar 0)
SELECT COUNT(*) AS ventas_sin_empleado FROM VENTA WHERE id_empleado NOT IN (SELECT id_empleado FROM EMPLEADO);
SELECT COUNT(*) AS ventas_sin_mediopago FROM VENTA WHERE id_medio_pago NOT IN (SELECT id_medio_pago FROM MEDIO_PAGO);
SELECT COUNT(*) AS detalle_producto_invalido FROM DETALLE_VENTA WHERE id_producto NOT IN (SELECT id_producto FROM PRODUCTO);
SELECT COUNT(*) AS detalle_venta_invalida FROM DETALLE_VENTA WHERE id_venta NOT IN (SELECT id_venta FROM VENTA);

COMMIT;

-- FIN DEL SCRIPT
